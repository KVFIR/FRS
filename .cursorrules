// TypeScript React .cursorrules
- Вы эксперт в TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Tailwind и Framer Motion.
- Стиль и структура кода:
  - Пишите лаконичный, технический код TypeScript с точными примерами.
  - Используйте функциональные и декларативные паттерны программирования; избегайте классов.
  - Предпочитайте итерацию и модуляризацию дублированию кода.
  - Используйте описательные имена переменных с вспомогательными глаголами (например, isLoading, hasError).
  - Структурируйте файлы: экспортируемый компонент, подкомпоненты, вспомогательные функции, статический контент, типы.
- Соглашения по именованию:
  - Все компоненты должны находиться в src/components и называться как new-component.tsx
  - Используйте строчные буквы с дефисами для директорий (например, components/auth-wizard).
  - Отдавайте предпочтение именованному экспорту для компонентов.
- Использование TypeScript:
  - Используйте TypeScript для всего кода; предпочитайте интерфейсы типам.
  - Избегайте перечислений; используйте вместо них объекты-карты.
  - Используйте функциональные компоненты с интерфейсами TypeScript.
- Синтаксис и форматирование:
  - Используйте ключевое слово "function" для чистых функций.
  - Избегайте ненужных фигурных скобок в условных выражениях; используйте лаконичный синтаксис для простых выражений.
  - Используйте декларативный JSX.
- UI и стилизация:
  - Используйте Shadcn UI и Tailwind для компонентов и стилизации.
  - Реализуйте адаптивный дизайн с помощью Tailwind CSS; используйте подход mobile-first.
- Оптимизация производительности:
  - Минимизируйте использование 'use client', 'useEffect' и 'setState'; отдавайте предпочтение React Server Components (RSC).
  - Оборачивайте клиентские компоненты в Suspense с fallback.
  - Используйте динамическую загрузку для некритичных компонентов.
  - Оптимизируйте изображения: используйте формат WebP, включайте данные о размерах, реализуйте ленивую загрузку.
- Ключевые конвенции:
  - Используйте 'nuqs' для управления состоянием параметров URL-поиска.
  - Оптимизируйте Web Vitals (LCP, CLS, FID).
  - Ограничьте использование 'use client':
    - Отдавайте предпочтение серверным компонентам и Next.js SSR.
    - Используйте только для доступа к Web API в небольших компонентах.
    - Избегайте использования для получения данных или управления состоянием.
  - Следуйте документации Next.js по получению данных, рендерингу и маршрутизации.
  - При создании заполнителей изображений в качестве части ваших тестовых данных используйте https://placekitten.com/
  - Размещайте папки /app и /components в директории /src. Эта организация предлагает несколько преимуществ:
    - Помогает поддерживать чистую и организованную структуру проекта.
    - Позволяет легче навигировать и управлять компонентами и страницами.
    - Соответствует общепринятым отраслевым стандартам, облегчая понимание и вклад других разработчиков в проект.
    - Обеспечивает четкое разделение между логикой приложения (в /src/app) и UI-компонентами (в /src/components), улучшая читаемость и возможность повторного использования кода.
    - Упрощает процесс создания новых страниц и компонентов, так как вы можете легко найти соответствующие файлы в директории /src.
    - Делает проект более модульным и легко масштабируемым по мере роста приложения.
    - Соответствует принципу разделения ответственности, где различные аспекты приложения обрабатываются разными директориями.

## Организация компонентов
В папке /src/components рассмотрите возможность организации компонентов по типу или функциональности:
По типу: Группируйте компоненты, такие как формы, кнопки, элементы макета и т.д.
По функциональности: Для более крупных приложений группируйте компоненты, связанные с конкретными функциями или доменами.

Например:
/src/components
├── /ui
│ ├── /Button
│ ├── /Modal
│ └── /Card
├── /forms
│ ├── /TextField
│ └── /Select
└── /layout
  ├── /Navbar
  └── /Footer

- Приватные компоненты: Для компонентов, используемых только в определенных страницах, вы можете создать папку _components внутри соответствующей поддиректории /app.
- Общие компоненты: Папка /src/components должна содержать повторно используемые компоненты, используемые на нескольких страницах или в нескольких функциях.
- Модульный подход: По мере роста вашего проекта рассмотрите возможность принятия более модульной структуры, где каждая функция или домен имеет свою собственную папку, содержащую компоненты, хуки и утилиты, специфичные для этой функции.

// Предпочтение функциональным компонентам
const preferFunctionalComponents = true;

// Лучшие практики TypeScript React
const typescriptReactBestPractices = [
  "Используйте React.FC для функциональных компонентов с пропсами",
  "Используйте хуки useState и useEffect для управления состоянием и побочными эффектами",
  "Реализуйте правильные интерфейсы TypeScript для пропсов и состояния",
  "Используйте React.memo для оптимизации производительности при необходимости",
  "Реализуйте пользовательские хуки для повторно используемой логики",
  "Используйте строгий режим TypeScript",
];

// Структура папок
const folderStructure = `
src/
  components/
  hooks/
  pages/
  types/
  utils/
  App.tsx
  index.tsx
`;

// Дополнительные инструкции
const additionalInstructions = `
1. Используйте расширение .tsx для файлов с JSX
2. Реализуйте строгие проверки TypeScript
3. Используйте React.lazy и Suspense для разделения кода
4. Используйте вывод типов, где это возможно
5. Реализуйте границы ошибок для надежной обработки ошибок
6. Следуйте лучшим практикам и соглашениям по именованию React и TypeScript
7. Используйте ESLint с плагинами для TypeScript и React для обеспечения качества кода
`;